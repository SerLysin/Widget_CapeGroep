import { useState, useRef, useEffect, createElement } from 'react';

const localStorageKey = 'chatMessages';
function Test({ initialGreeting, result, userInput, onUserInputChange, systemResponse }) {
    const [messages, setMessages] = useState([]);
    const messagesEndRef = useRef(null);
    const [isChatOpen, setIsChatOpen] = useState(false); // State to track chat visibility
    useEffect(() => {
        var _a;
        // Scroll to the latest message
        (_a = messagesEndRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);
    useEffect(() => {
        // Load chat messages from localStorage
        const savedMessages = localStorage.getItem(localStorageKey);
        if (savedMessages) {
            setMessages(JSON.parse(savedMessages));
        }
        else {
            // Initialize with an optional initial greeting if provided through props
            const welcomeMessage = { text: initialGreeting || "Hello! How can I help you today?", sender: "system" };
            setMessages([welcomeMessage]);
            localStorage.setItem(localStorageKey, JSON.stringify([welcomeMessage])); // Save initial message to localStorage
        }
    }, [initialGreeting]);
    const saveMessagesToStorage = (updatedMessages) => {
        localStorage.setItem(localStorageKey, JSON.stringify(updatedMessages));
    };
    const handleInputChange = (event) => {
        // Update local state to reflect user's input
        userInput === null || userInput === void 0 ? void 0 : userInput.setValue(event.target.value);
        result.setValue(event.target.value); //user input to mendix
    };
    const handleUserInput = (event) => {
        var _a;
        const input = (_a = userInput === null || userInput === void 0 ? void 0 : userInput.value) !== null && _a !== void 0 ? _a : "";
        if (event.key === "Enter" && input.trim()) {
            displayUserMessage(input.trim());
            userInput === null || userInput === void 0 ? void 0 : userInput.setValue("");
            if ((onUserInputChange === null || onUserInputChange === void 0 ? void 0 : onUserInputChange.canExecute) && !onUserInputChange.isExecuting) {
                onUserInputChange === null || onUserInputChange === void 0 ? void 0 : onUserInputChange.execute();
            }
        }
    };
    useEffect(() => {
        var _a;
        if (isChatOpen) {
            // Scroll to the latest message only if the chat is open
            (_a = messagesEndRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages, isChatOpen]);
    useEffect(() => {
        if (systemResponse === null || systemResponse === void 0 ? void 0 : systemResponse.value) {
            // `systemResponse` has been updated, display the system message
            displaySystemMessage(systemResponse.value);
        }
    }, [systemResponse === null || systemResponse === void 0 ? void 0 : systemResponse.value]); // Only re-run the effect if `systemResponse.value` changes
    const displayUserMessage = (message) => {
        setMessages(prevMessages => {
            const updatedMessages = [...prevMessages, { text: message, sender: "user" }];
            saveMessagesToStorage(updatedMessages);
            return updatedMessages;
        });
    };
    const displaySystemMessage = (message) => {
        setMessages(prevMessages => {
            const updatedMessages = [...prevMessages, { text: message, sender: "system" }];
            saveMessagesToStorage(updatedMessages);
            return updatedMessages;
        });
    };
    const renderMessages = () => messages.map((message, index) => (createElement("div", { key: index, className: `chat-message ${message.sender === "user" ? "user-message" : "system-message"}` }, message.text)));
    const toggleChat = () => {
        setIsChatOpen(!isChatOpen);
        if (!isChatOpen) {
            setTimeout(() => {
                var _a;
                (_a = messagesEndRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' });
            }, 0);
        }
    };
    const renderChatToggleButton = () => {
        if (!isChatOpen) {
            return createElement("button", {
                className: "chat-toggle",
                onClick: toggleChat,
                "aria-label": "Open Chat"
            }, "+" // Replace with your icon if needed
            );
        }
        return null; // Don't render the button when the chat is open
    };
    const renderChat = () => {
        return createElement("div", { className: `chatbot-widget ${isChatOpen ? 'open' : ''}` }, createElement("div", { className: "chat-header" }, "Cape Groep Assistant", createElement("button", {
            className: "collapse-button",
            onClick: toggleChat,
            "aria-label": "Collapse Chat"
        })), createElement("div", { className: "chat-body", style: { overflowY: 'auto', maxHeight: '300px' } }, renderMessages(), createElement("div", { ref: messagesEndRef })), createElement("input", {
            type: "text",
            className: "user-input",
            placeholder: "Type a message...",
            value: userInput === null || userInput === void 0 ? void 0 : userInput.value,
            onChange: handleInputChange,
            onKeyPress: handleUserInput
        }));
    };
    return createElement("div", { className: "chat-container" }, renderChatToggleButton(), isChatOpen ? renderChat() : null);
}

export { Test };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
